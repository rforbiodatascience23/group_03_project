---
title: "02 CLEAN"
format: html
editor: visual
---

## Setup

Load required packages.

```{r}
#| label: 02_Load packages
#| message: false
library("tidyverse")
```

Load gene expression and meta data.

```{r}
#| label: 02_Load data
#| message: false
dat_expr <- read_tsv("../data/01_dat_load_expr.tsv")
dat_meta <- read_tsv("../data/01_dat_load_meta.tsv")
```

## Data Wrangling I

In this section, variable of gene expression data and meta data are variables are cleaned separately.

### Gene Expression Data

In the following the gene expression data is inspected, cleaned and simplified.

```{r}
dat_expr |> 
  sample_n(10)
```

From the inspection, it is seen that the data contain both gene expressions and p values. The detected p values are removed such that the gene expression data only consists of the gene expressions.

```{r}
#| label: 02_Clean dat_expr
dat_expr <- dat_expr |> 
  dplyr::select(!matches(match = "Detection.Pval"))

dat_expr |> 
  sample_n(10)
```

Column names are simplified as the date is saved in the meta data.

```{r}
#| label: 02_Simplify dat_expr
dat_expr |> 
  colnames() = str_extract(string = colnames(dat_expr),
                           pattern = "^[A-Z0-9]+\\.?[0-9]*")

dat_expr |> 
  sample_n(10)
```

### Meta Data

In the following the meta data is inspected, relevant columns are extracted, renamed and simplified

```{r}
colnames(dat_meta)
```

We are interested in keeping 'title', 'geo_accession', and 'description.1'. The last mentioned column is the identifier refering to each sample found in the gene expression data. Furthermore, we want to extract information about gender and disease state described by 'characteristics_ch1' and 'characteristics_ch1.2'. This information is also found in the variables 'gender.ch1' and 'disease.state.ch1' in a nicer format. We chose to work with the first mentioned columns for educational purposes.

```{r}
#| label: 02_Extract relevant dat_meta
dat_meta <- dat_meta |>
  dplyr::select(title,
                geo_accession,
                characteristics_ch1,
                characteristics_ch1.2,
                description.1) |> 
  dplyr::rename("patient_n" = title,
                "gender" = characteristics_ch1,
                "disease_state" = characteristics_ch1.2,
                "identifier" = description.1)

dat_meta |> 
  dplyr::select(patient_n, 
         gender, 
         disease_state,
         identifier) |>
  sample_n(10)
```

Simplify the columns 'patient', 'gender' and 'disease state'.

```{r}
#| label: 02_Simplify dat_meta
dat_meta <- dat_meta |> 
  mutate(patient_n = str_extract(string = patient_n,
                                 pattern = "[0-9]+_?[0-9]?"),
         gender = str_extract(string = gender,
                              pattern = "Female|Male"),
         disease_state = str_extract(string = disease_state,
                              pattern = "HIV/TB|HIV"))
dat_meta |> 
  sample_n(10)
```

The column 'identifier' in the meta data contain the names of the genes described in the expression data. In the following, the 'identifier' is corrected to mimic the genes of the expression data in order to join the two data sets later on.

The 'identifier' in the meta data is split into two columns to simplify the identifier but still keep the information about the dates.

```{r}
dat_meta <- dat_meta |> 
  separate(col = identifier,
           into = c("identifier", "date"),
           sep = "_")

dat_meta |> 
  sample_n(10)
```

In the gene expression data the gene names contain "-" while the 'identifier' in the meta data contain ".". Replace the "-" in the meta data to streamline the two data sets.

```{r}
#| label: 02_Streamline 'identifier'
dat_meta <- dat_meta |> 
  mutate(identifier = str_replace_all(string = identifier,
                                      pattern = "-",
                                      replacement = "."))
```

Check if there is consensus between the 'identifiers' in the meta data and the column names (gene names) of the gene expression data.

```{r}
#| label: 02_Compare 'identifier' with dat_expr column name 
meta_identifier <- dat_meta |>
  pull(identifier)

setdiff(colnames(dat_expr), meta_identifier)
```

The only difference between 'identifier' in meta data and column names of the gene expression data is the 'ID' column for the genes as expected.

## Data Wrangling II

In the following steps, the format of the data will be changed. Furthermore, we wish to join the gene expression data and the meta data.

### Data Pivoting

The gene expression data is transposed by pivoting sample 'identifier' to long format and gene 'ID' to wide format. The data should be tidy, which requires each observation, that is, each patient, must be a row, with the variables as columns. 

```{r}
#| label: 02_Pivot dat_expr
dat_expr <- dat_expr |> 
  pivot_longer(cols = !ID,
               names_to = "identifier",
               values_to = "count") |> 
  pivot_wider(names_from = ID,
              values_from = count)

dat_expr |> 
  sample_n(10)
```

### Data Joining

The meta data and the count data should be merge such that all data about a patient is contained in one tibble. Meta data should be in the first columns followed by gene variables.

```{r}
#| label: 02_Join dat_expr with dat_meta
dat_clean <- inner_join(x = dat_expr,
                        y = dat_meta,
                        by = "identifier") |> 
  relocate(colnames(dat_meta))
```

### Handling Replicates

There are two technical replicates available for one patient, namely patient 2_1 and 2_2 indicated by the 'patient_n' column. We wish to averaged the measurements for this patient for further analysis.

First, the gene expression values for the replicates are extracted.

```{r}
#| label: 02_Extract replicates
dat_rep <- dat_clean |>
  filter(str_detect(patient_n, "_")) |>
  mutate(patient_n = str_extract(string = patient_n, 
                                 pattern = "[0-9]+")) 

dat_rep 
```

The mean gene expression is calculated for each replicated patient.

```{r}
#| label: 02_Mean expression for replicates
dat_rep_mean <- dat_rep |> 
  group_by(patient_n) |>
  summarise(across(.cols = starts_with("ILMN"),
                   .fns = mean,
                   na.rm = TRUE))

dat_rep_mean
```

The metadata for each replicated patient is extracted. The 'geo accession' and 'identifer' is collapsed, meaning that the new 'geo accession' and 'identifer' for the replicated patient is a combination of the originals.

```{r}
#| label: 02_Extraxt and collapse meta data for replicates
cols_rep_meta_collapesed <- dat_rep |>
  group_by(patient_n) |> 
  mutate(geo_accession = str_c(geo_accession, collapse = "_"),
            identifier = str_c(identifier, collapse = "_"))

cols_rep_meta_collapesed
```

A new column called 'modified' is added to the meta data. The column describes if the patient has been modified (eg. the gene expression represent a mean of multiple gene expressions for one patient).

```{r}
#| label: 02_Add column modified
cols_rep_meta <- cols_rep_meta_collapesed |>
  dplyr::select(!starts_with("ILMN")) |> 
  distinct() |> 
 mutate(modified = 1)

cols_rep_meta

dat_clean <- dat_clean |>
  mutate(modified = 0)
```

Combine the new meta data with the mean gene expression for the each replicated patient.

```{r}
#| label: 02_Combine mean expression and meta data for replicates
dat_rep_clean <- inner_join(x = cols_rep_meta, 
                            y = dat_rep_mean,
                            by = "patient_n")
```

Finally, the new data for th replicated patients are combines with the data for the non-replicated patients to form a clean data set without replicates.

As the patient_n variable is no longer informative, this column is removed for all patients.

```{r}
#| label: 02_Add rep data with non-rep data
#| message: false
dat_clean <- full_join(dat_clean, dat_rep_clean) |>
  relocate(modified, .after = date) |>
  filter(!str_detect(patient_n, "_")) |>  
  dplyr::select(!patient_n) |> 
  arrange(disease_state) 

dat_clean |> 
  sample_n(10)
```

## Write Data to File

The cleaned data is written as a tsv file.

```{r}
#| label: 02_Write tsv-files
dat_clean |> 
  write_tsv(file = "../data/02_dat_clean.tsv")
```
