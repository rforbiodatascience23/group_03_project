---
title: "Analysis 2"
format: html
editor: visual
---

## Setup

Loading required packages.

```{r}
#| label: Load packages
#| message: false
library('tidyverse')
library('broom')
library("ggrepel")
```

Load the augment data.

```{r}
#| label: Load data
#| message: false
dat_aug <- read_tsv(file = "../data/04_dat_aug.tsv")
```

## Linear Regression

In the following a linear regression model is mapped to the data. In order to do so, the data need to be pivoted to long format and grouped by genes. Gene expression levels and disease label are nested pr. gene.

```{r}
#| label: Pivot and nest data
dat_nest <- dat_aug |>
  pivot_longer(cols = matches("^ILMN_[0-9]+"),
               names_to = "gene", 
               values_to = "log2_expr_level") |> 
               group_by(gene) |> 
               nest()

dat_nest
```

A linar regression model is mapped to the nested data of each gene.

```{r}
#| label: Linear regression model 
dat_nest <- dat_nest |>
  mutate(model_object = map(.x = data,
                   .f = ~lm(formula = log2_expr_level ~ disease_state,
                            data = .x)))
```


Tidy statistics are mapped to the model of each gene and saved in 'tidy_model_object'.

```{r}
#| label: Apply tidy to model objects
dat_nest <- dat_nest |>
  mutate(tidy_model_object = map(.x = model_object,
                   .f = ~tidy(conf.int = TRUE,
                              conf.level = 0.95,
                              x = .x)))


```

The tidy model objects are unnested, only slope estimates are kept for each gene and selected together with p-values and CI values. Lastly, the data is being ungrouped.

```{r}
#| label: Unnest and ungroup data
dat_estimates <- dat_nest |> 
  unnest(tidy_model_object) |> 
  filter(term != "(Intercept)") |> 
  select(gene, p.value, estimate, conf.low, conf.high) |> 
  ungroup()
```

An adjusted p-value is calculated and added to the data estimate table together with a "significant label" based on a 0.05% significance level and a "most_sign varible with the 20 most significant genes.

```{r}
#| label: Adjusted p-value and significant label
dat_estimates <- dat_estimates |>
  mutate(p_val_adjust = p.adjust(p.value),
         significant = case_when(p_val_adjust <= 0.05 ~ "Yes", TRUE ~"No")) |> 
  arrange(p_val_adjust) |>
         mutate(most_sign = case_when(
           p_val_adjust < nth(p_val_adjust, 20) ~ "Yes", TRUE ~"No")) 


dat_estimates |> 
  filter(most_sign == "Yes")
```

### Forest Plot

A forest plot is generated showing the genes that are significantly up- or down-regulated in tuberculosis patients (TB).

```{r}
#| label: Forrest plot
dat_forest_plot <- dat_estimates |> 
  filter(significant == "Yes") 

forest_plot <- ggplot(data=dat_forest_plot, aes(x=estimate, y=fct_reorder(gene, estimate), xmin = conf.low, xmax = conf.high)) +
  geom_point() +
  geom_errorbarh() +
  labs(
    x = "Estimates (95% CIs)", y = "", title = "Genes Associated with Tuberculosis in HIV patients"  
  ) +
  theme_minimal()

ggsave("../results/forest_plot.png",plot = forest_plot) 

```

### Vulcano Plot

A vulcano plot is generated to show significance of the genes as a function of the gene expression estimates.

```{r}
#| label: Vulcano plot

dat_vulcano_plot <- dat_estimates |> 
  mutate(gene_labels = case_when(p_val_adjust <= 0.05 ~ gene, TRUE ~""))

vulcano_plot <- ggplot(data=dat_vulcano_plot, aes(x=estimate,
                                   y=-log10(p.value), 
                                   color = significant,
                                   label = gene_labels)) +
  geom_point(alpha = 0.7) +
  scale_color_manual(
    values = c("Yes" = "orange", 
               "No" = "gray") ) +
  labs(
    x = "Estimates (95% CIs)",
    y = "-log10(p)",
    title = "Genes Associated with Tuberculosis",
    subtitle = "Genes highlighted in turquoise were significant after multiple testing correction"
  ) +
  theme_minimal() +
  geom_text_repel(size = 2, max.overlaps = 20) +
  theme(legend.position = "none",
        plot.title = element_text(hjust = 0),  
        plot.subtitle = element_text(hjust = 0)  
  )


ggsave("../results/vulcano_plot.png",plot = vulcano_plot)  

```
