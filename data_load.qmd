---
title: "Data Load"
format: html
editor: visual
---

## Data origin

The gene expression data used in this project is available in the Gene Expression Omnibus (GEO) under the accession number GSE50834.The data was used for the following paper:

Dawany N, Showe LC, Kossenkov AV, Chang C et al. Identification of a 251 gene expression signature that can accurately detect M. tuberculosis in patients with and without HIV co-infection. PLoS One 2014;9(2):e89925. PMID: 24587128

## Summary

The data comes from total RNA isolated from peripheral blood mononuclear cell (PBMC) from a South African cohort. Microarry analysis was performed to compare gene expression in patients either infected with HIV or co-infected with HIV/TB. Diagnosis of TB, especially in the presence of an HIV co-infection, can be challenging when using conventional diagnostic methods. Therefore, the data was used to identify a TB-specific gene signature.

## Data Load

Loading required packages.

```{r}
#| message: false
library("tidyverse")
library("dplyr")
library("stringr")
library("GEOquery")
library("illuminaHumanv4.db")
```

### Gene Expression Counts

RNA-seq gene expression counts were available as a txt file. The file is loaded into R using the package GEOquery:

```{r}
# Set the working directory to were your data folder is placed.
geo <- "GSE50834"

# Download gene expression data
data_file <- getGEOSuppFiles(GEO = geo,
                             makeDirectory = FALSE,
                             fetch_files = TRUE,
                             filter_regex = "txt")

count_data <- read.table(file = "GSE50834_non-normalized.txt.gz",
                         sep = "\t",
                         header = TRUE)
```

The count data is converted and from data frame to tibble:

```{r}
count_data <- tibble(count_data)

count_data |> 
  sample()
```

We see that the data do not only consist of gene counts but is also interrupted by p values. These should be removed.

### Meta Data

Meta data is retrieved with the getGEO fucntion from the GEOquery package:

```{r}
# Get metadata  
meta_data <- getGEO(GEO = geo,
                    GSEMatrix = TRUE)

meta_data <- pData(phenoData(meta_data[[1]]))

# Convert data to tibble
meta_data <- tibble(meta_data)
```

We see what meta data is available for the samples.

```{r}
colnames(meta_data)
```

We will be interested in keeping title, geo_accession, and description.1. The last mentioned column is the identifier fom each sample that is found in the data for expression counts. Furthermore, we want information about gender and disease state described by characteristics_ch1 and characteristics_ch1.2. This information is also found in the variables gender:ch1 and disease state:ch1 in a nicer format. We chose to work with the first mentioned columns for educational purposes.

## Data Wrangling I

### Gene Expression Counts

The detected p values are removed such that only the counts are left.

```{r}
count_data <- count_data |> 
  dplyr::select(-matches(match = "Detection.Pval"))

count_data |> 
  sample()
```

Column names are simplyfied.

```{r}
count_data |> 
  colnames() = str_extract(string = colnames(count_data),
                           pattern = "^[A-Z0-9]+\\.?[0-9]*")

count_data |> 
  sample()
```

### Meta Data

Select and rename relevant variables.

```{r}
meta_data <- meta_data |>
  dplyr::select(title,
               geo_accession,
               characteristics_ch1,
               characteristics_ch1.2,
               description.1) |> 
  rename(title = "patient_n",
         characteristics_ch1 = "gender",
         characteristics_ch1.2 = "disease_state",
         description.1 = "identifier")
```

We clean up patient, gender and disease state columns.

```{r}
meta_data <- meta_data |> 
  mutate(patient_n = str_extract(string = patient_n,
                                 pattern = "[0-9]+_?[0-9]?"),
         gender = str_extract(string = gender,
                              pattern = "Female|Male"),
         disease_state = str_extract(string = disease_state,
                              pattern = "HIV/TB|HIV"))
meta_data |> 
  sample()
```

The identifier is splitted to simplify the identifier but still keeping the information about the dates.

```{r}
meta_data <- meta_data |> 
  separate(col = identifier,
           into = c("identifier", "date"),
           sep = "_")

meta_data |> 
  sample()
```

In the count data, the "-" in the identifier (column names) is a ".". We replace the "-" in the metadata:

```{r}
meta_data <- meta_data |> 
  mutate(identifier = str_replace_all(string = identifier,
                                      pattern = "-",
                                      replacement = "."))
```

We check if there is consensus between the identifiers in the meta data and the column names of the count data.

```{r}
setdiff(colnames(count_data), meta_data$identifier)
```

The only difference between identifiers and column names of the count data is the ID column for the genes as expected.

## Data Wrangling II

TASKS

1)  Count data should be pivoted such that each row is a observation (patient) and each column is a variable (gene)

2)  The meta data and the count data should be merge such that all data about a patient is contained in one tibble. Meta data should be in the first columns followed by gene variables.

## Notes

The data is from Illumina HumanHT-12 V4.0 expression beadchip. We can translate/convert the ILMN identifiers to gene names:

```{r}
#mappedkeys(illuminaHumanv4SYMBOL)
#keyname(illuminaHumanv4SYMBOL)
#as.list(illuminaHumanv4SYMBOL[count_data$ID])
```
